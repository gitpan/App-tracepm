#!perl

# Note: This script is a CLI interface to Riap function /App/tracepm/tracepm
# and generated automatically using Dist::Zilla::Plugin::Rinci::ScriptFromFunc version 0.03

our $DATE = '2014-12-26'; # DATE
our $VERSION = '0.11'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any -prefer_lite=>1;

Perinci::CmdLine::Any->new(
    url => "/App/tracepm/tracepm",
    log => 1,
)->run;

# ABSTRACT: Trace dependencies of your Perl script
# PODNAME: tracepm

__END__

=pod

=encoding UTF-8

=head1 NAME

tracepm - Trace dependencies of your Perl script

=head1 VERSION

This document describes version 0.11 of tracepm (from Perl distribution App-tracepm), released on 2014-12-26.

=head1 SYNOPSIS

Usage:

 % tracepm [options] <script> [args]

=head1 OPTIONS

C<*> marks required options.

=head2 Field-selection options

=over

=item B<--detail>

Whether to return records instead of just module names.

=back

=head2 Filtering options

=over

=item B<--core>

Filter only modules that are in core.

=item B<--xs>

Filter only modules that are XS modules.

=back

=head2 General options

=over

=item B<--args-json>=I<s>

Script arguments (JSON-encoded).

See C<--args>.

=item B<--args>=I<s@>

Script arguments.

Can be specified multiple times.

=item B<--cache-prereqscanner>

Whether cache Perl::PrereqScanner{,::Lite} result.

=item B<--config-path>=I<s>

Set path to configuration file.

Can be specified multiple times.

=item B<--config-profile>=I<s>

Set configuration profile to use.

=item B<--debug>

Set log level to debug.

=item B<--format>=I<s>

Choose output format, e.g. json, text.

=item B<--help>, B<-h>, B<-?>

Display this help message.

=item B<--json>

Set output format to json.

=item B<--log-level>=I<s>

Set log level.

=item B<--method>=I<s>

Tracing method to use.

Default value:

 "fatpacker"

Valid values:

 ["fatpacker", "require", "prereqscanner", "prereqscanner_lite", "prereqscanner_recurse", "prereqscanner_lite_recurse"]

There are several tracing methods that can be used:

* `fatpacker` (the default): This method uses the same method that `fatpacker
  trace` uses, which is running the script using `perl -c` then collect the
  populated `%INC`. Only modules loaded during compile time are detected.

* `require`: This method runs your script normally until it exits. At the start
  of program, it replaces `CORE::GLOBAL::require()` with a routine that logs the
  require() argument to the log file. Modules loaded during runtime is also
  logged by this method. But some modules might not work, specifically modules
  that also overrides require() (there should be only a handful of modules that
  do this though).

* `prereqscanner`: This method does not run your Perl program, but statically
  analyze it using `Perl::PrereqScanner`. Since it uses `PPI`, it can be rather
  slow.

* `prereqscanner_recurse`: Like `prereqscanner`, but will recurse into all
  non-core modules until they are exhausted. Modules that are not found will be
  skipped. It is recommended to use the various `recurse_exclude_*` options
  options to limit recursion.

* `prereqscanner_lite`: This method is like the `prereqscanner` method, but
  instead of `Perl::PrereqScanner` it uses `Perl::PrereqScanner::Lite`. The
  latter does not use `PPI` but use `Compiler::Lexer` which is significantly
  faster.

* `prereqscanner_lite_recurse`: Like `prereqscanner_lite`, but recurses.


=item B<--naked-res>

When outputing as JSON, strip result envelope.

By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]


=item B<--no-config>

Do not use any configuration file.

=item B<--perl-version>=I<s>, B<-V>

Perl version, defaults to current running version.

This is for determining which module is core (the list differs from version to
version. See Module::CoreList for more details.


=item B<--quiet>

Set log level to quiet.

=item B<--recurse-exclude-core>

When recursing, exclude core modules.

=item B<--recurse-exclude-json>=I<s>

When recursing, exclude some modules (JSON-encoded).

See C<--recurse-exclude>.

=item B<--recurse-exclude-pattern-json>=I<s>

When recursing, exclude some module patterns (JSON-encoded).

See C<--recurse-exclude-pattern>.

=item B<--recurse-exclude-pattern>=I<s@>

When recursing, exclude some module patterns.

Can be specified multiple times.

=item B<--recurse-exclude-xs>

When recursing, exclude XS modules.

=item B<--recurse-exclude>=I<s@>

When recursing, exclude some modules.

Can be specified multiple times.

=item B<--script>=I<s>*

Path to script file (script to be packed).

=item B<--trace>

Set log level to trace.

=item B<--use-json>=I<s>

Additional modules to "use" (JSON-encoded).

See C<--use>.

=item B<--use>=I<s@>

Additional modules to "use".

This is like running:

    perl -MModule1 -MModule2 script.pl


Can be specified multiple times.

=item B<--verbose>

Set log level to info.

=item B<--version>, B<-v>

=back

=head1 FILES

B</etc/tracepm.conf>

B<~/tracepm.conf>

=head1 COMPLETION

This script has shell tab completion capability with support for several shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C tracepm tracepm

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to activate completion scripts for several kinds of scripts on multiple shells. Some CPAN distributions (those that are built with L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell completion for their included scripts (using C<shcompgen>) at installation time, so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete tracepm 'p/*/`tracepm`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-tracepm>.

=head1 SOURCE

Source repository is at L<https://github.com/perlancar/perl-App-tracepm>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-tracepm>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2014 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
